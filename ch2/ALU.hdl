// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
        // set x/y = 0 if zx/zy = 1
        Mux16(a=x, b[0..15]=false, sel=zx, out=x0);
        Mux16(a=y, b[0..15]=false, sel=zy, out=y0);
  
        // set x/y = !x/!y if nx/ny = 1 
        Not16(in=x0, out=nx0);
        Not16(in=y0, out=ny0);
        Mux16(a=x0, b=nx0, sel=nx, out=x1);
        Mux16(a=y0, b=ny0, sel=ny, out=y1);

        // x+y
        Add16(a=x1, b=y1, out=outsum);
  
        // x&y
        And16(a=x1, b=y1, out=outand); 

        // f=0 -> out = a & b, f=1 -> out = a + b
        Mux16(b=outsum, a=outand, sel=f, out=out0);

        // !out
        Not16(in=out0, out=out1);

        // no -> out = !out
        Mux16(a=out0, b=out1, sel=no, out=out2);
        And16(a=out2, b[0..15]=true, out=out);

        // compute zr
        Zero16(in=out2, out=zr);

        // compute ng
        Neg16(in=out2, out=ng);
}
